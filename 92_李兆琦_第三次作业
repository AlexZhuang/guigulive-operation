pragma solidity ^0.4.14;

contract Payroll {
    struct Employee{
        address id;
        uint salary;
        uint lastPayday;
    }
    uint constant payDuration = 10 seconds;
    uint totalSalary;

    address owner;
    mapping(address => Employee)  public employees;

    function Payroll() {
        owner = msg.sender;
    }
    
    modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }
    
    modifier employeeExist(address employeeId){
        var Employee = employees[employeeId];
        assert(Employee.id!=0x0);
        _;
    }
    
    function _partialPaid(Employee employee) private {
        uint payment = employee.salary * (now-employee.lastPayday)/payDuration;
        employee.id.transfer(payment);
    }
    
    function changePaymentAddress(address employeeId, address newAddress){
        var Employee = employees[employeeId];
        Employee.id = newAddress;
    }
    
    function addEmployee(address employeeId, uint salary) onlyOwner{
        
        var employee = employees[employeeId];
     
        totalSalary += salary *1 ether;
      
        employees[employeeId]=Employee(employeeId,salary,now);
        
    }
    
    function removeEmployee(address employeeId) onlyOwner employeeExist(employeeId){
        
                 var employee = employees[employeeId];
                
                
                _partialPaid(employee);
                totalSalary-=employees[employeeId].salary * 1 ether;
                delete employees[employeeId];
                return;
            
        
    }
    
    function updateEmployee(address employeeId, uint salary) onlyOwner employeeExist(employeeId) {
        
        var employee = employees[employeeId];
        
            _partialPaid(employee);
            totalSalary -= employees[employeeId].salary;
            employees[employeeId].salary = salary * 1 ether;
            totalSalary+=employees[employeeId].salary;
            employees[employeeId].lastPayday = now;
        
    }
    
    function addFund() payable returns (uint) {
        return this.balance;
    }
    
    function calculateRunway() returns (uint) {
        return this.balance / totalSalary;
    }
    
    function hasEnoughFund() returns (bool) {
        return calculateRunway() > 0;
    }
    
    function checkEmployee(address employeeId) returns(uint salary,uint lastPayday){
        var employee = employees[employeeId];
        salary = employee.salary;
        lastPayday = employee.lastPayday;
    }
    
    function getPaid()employeeExist(msg.sender) {
        var employee= employees[msg.sender];
        assert(employee.id!=0x0);
        
        uint nextPayday = employee.lastPayday + payDuration;
        assert(nextPayday < now);

        employees[msg.sender].lastPayday = nextPayday;
        employee.id.transfer(employee.salary);
    }
}

