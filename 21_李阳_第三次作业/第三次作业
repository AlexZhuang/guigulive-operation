pragma solidity ^0.4.14;

import "https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/math/SafeMath.sol";

contract Payroll {
    uint constant payDuration = 10 seconds;
    struct Employee {
        address id;
        uint salary;
        uint lastPayday;
    }

    address owner;
    mapping(address => Employee) employees;
    uint totalSalary = 0;

    modifier onlyOwner() {
        require(msg.sender == owner);
        _;
    }
    
    function Payroll() {
        owner = msg.sender;
    }
    
    function _partialPaid(Employee employee) private {
        uint leftPayment = employee.salary * (now - employee.lastPayday) / payDuration;
        employee.id.transfer(leftPayment);
    }

    function addEmployee(address employeeId, uint salary) onlyOwner {
        Employee employee = employees[employeeId];
        require(employee.id == 0x0);
        salary *= 1 ether;
        employees[employeeId] = Employee(employeeId, salary, now);
        totalSalary = SafeMath.add(totalSalary, salary);
    }
    
    function removeEmployee(address employeeId) onlyOwner {
        Employee employee = employees[employeeId];
        require(employee.id != 0x0);
        _partialPaid(employee);
        delete(employees[employeeId]);
        totalSalary = SafeMath.sub(totalSalary, employee.salary); 
    }
    
    function updateEmployee(address employeeId, uint salary) onlyOwner {
        Employee employee = employees[employeeId];
        require(employee.id != 0x0);
        _partialPaid(employee);
        totalSalary = SafeMath.sub(totalSalary, employee.salary); 
        employees[employeeId].lastPayday = now;
        employees[employeeId].id = employeeId;
        employees[employeeId].salary = salary * 1 ether;
        totalSalary = SafeMath.add(totalSalary, employees[employeeId].salary); 
    }
    
    function addFund() payable returns (uint) {
        return this.balance;
    }
    
    function calculateRunway() returns (uint) {
        return this.balance / totalSalary;
    }
    
    function hasEnoughFund() returns (bool) {
        return calculateRunway() >= 1;
    }
    
    function getPaid() payable {
        Employee employee = employees[msg.sender];
        require(employee.id != 0x0);
        
        uint nextPayDay = SafeMath.add(employee.lastPayday, payDuration);
        require(nextPayDay <= now);
        employees[msg.sender].lastPayday = nextPayDay;
        employee.id.transfer(employee.salary);
    }
    
    function changePaymentAddress(address expiredEmployeeId, address newEmployeeId) onlyOwner {
        Employee employee = employees[expiredEmployeeId];
        require(employee.id != 0x0);
        delete employees[employee.id];
        employees[newEmployeeId] = Employee(newEmployeeId, employee.salary, employee.lastPayday);
    }
}

#加分题：
- contract O
- contract A is O
- contract B is O
- contract C is O
- contract K1 is A, B
- contract K2 is A, C
- contract Z is K1, K2

L[O] := [O]
L[A] := [A] + MERGE(L[O],[O]) 
     := [A] + MERGE([O], [O])
     := [A, O]
L[B] := [B, O]
L[C] := [C, O]
L[K1] := [K1] + MERGE(L[A], L[B], [A, B])
      := [K1] + MERGE([A, O], [B, O], [A, B])
      := [K1, A] + MERGE([O], [B, O], [B])
      := [K1, A, B] + MERGE([O], [O])
      := [K1, A, B, O]
L[K2] := [K2] + MERGE(L[A], L[C], [A, C])
      := [K2] + MERGE([A, O], [C, O], [A, C])
      := [K2, A] + MERGE([O], [C, O], [C])
      := [K2, A, C] + MERGE([O], [O]) 
      := [K2, A, C, O]
L[Z] := [Z] + MERGE(L[K1], L[K2], [K1, K2])
     := [Z] + MERGE([K1, A, B, O], [K2, A, C, O], [K1, K2])
     := [Z, K1] + MERGE([A, B, O], [K2, A, C, O], [K2])
     := [Z, K1, K2] + MERGE([A, B, O], [A, C, O])
     := [Z, K1, K2, A] + MERGE([B, O], [C, O])
     := [Z, K1, K2, A, B] + MERGE([O], [C, O])
     := [Z, K1, K2, A, B, C] + MERGE([O], [O])
     := [Z, K1, K2, A, B, C]

