pragma solidity ^0.4.14;

contract Payroll {
    uint salary;
    uint constant payDuration = 20 seconds;
    uint lastPayDay = now;
    address employer = 0xca35b7d915458ef540ade6068dfe2f44e8fa733c;
    address employee;
    
    function addFund() payable returns (uint){
        return this.balance;
    }
    
    //update employee address
    function changeEmployee(address e){
        if ((msg.sender != employer) || (e == 0x0)){
            revert();
        }
        employee = e;
    }
    
    //update employee salary
    function changeSalary(uint s){
        if ((msg.sender != employer)||(s == 0x0)){
            revert();
        }
        salary = s * 1 ether;
    }
    
    function calculateRunway() returns (uint){
        return this.balance/salary;
    }
    
    function hasEnoughFund() returns (bool){
        return calculateRunway() > 0;
    }
    
    //updated
    function getPaid(){
        if (msg.sender != employee){
            revert();
        }
        uint nextPayDay = lastPayDay + payDuration;
        
        if (nextPayDay > now){
            revert();
        }
        lastPayDay = nextPayDay;
        uint payment = salary * (now - lastPayDay) / payDuration;
        employee.transfer(payment);
    }
}
