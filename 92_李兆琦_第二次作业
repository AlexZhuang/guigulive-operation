//
添加10位员工的消耗Gas量

1  646
2 2475
3 3256
4 4037
5 4818
6 5599
7 6380
8 7161
9 7942
10 8723

//
改变：设置全局变量totalSalary，之后只在addEmployee，deleteEmployee和UpdateEmployee时候更改这个参数，在调用CalculateRunway的时候可以直接使用，不用再重新走一遍
循环语句

pragma solidity ^0.4.14;

contract Payroll {
    struct Employee{
        address id;
        uint salary;
        uint lastPayday;
    }
    uint constant payDuration = 10 seconds;

    address owner;
    Employee[] employees;
    
    uint totalSalary = 0;

    function Payroll() {
        owner = msg.sender;
    }
    
    function _partialPaid(Employee employee) private {
        uint payment = employee.salary * (now-employee.lastPayday)/payDuration;
        employee.id.transfer(payment);
    }
    
    function _findemployee(address employeeId) private returns (Employee,uint){
         for (uint i=0; i<employees.length;i++){
            if(employees[i].id==employeeId){
                return (employees[i],i);
            }
         }
    }
    
    function addEmployee(address employeeId, uint salary){
        
        var (employee,index) = _findemployee(employeeId);
        assert(employee.id==0x0);
        totalSalary+=employee.salary;
      
        employees.push(Employee(employeeId,salary,now));
        
    }
    
    function removeEmployee(address employeeId){
        require(msg.sender == owner);
        var(employee,index) = _findemployee(employeeId);
               assert(employee.id != 0x0);
                _partialPaid(employees[index]);
                totalSalary-=employee.salary;
                delete employees[index];
                employees[index] = employees[employees.length-1];
                employees.length -= 1;
                return;
            
        
    }
    
    function updateEmployee(address employeeId, uint salary) {
        require(msg.sender==owner);
        var(employee,index) = _findemployee(employeeId);
        assert(employee.id!=0x0);
        
            _partialPaid(employee);
            employee.salary = salary;
            employee.lastPayday = now;
        
    }
    
    function addFund() payable returns (uint) {
        return this.balance;
    }
    
    function calculateRunway() returns (uint) {
        return this.balance / totalSalary;
    }
    
    function hasEnoughFund() returns (bool) {
        return calculateRunway() > 0;
    }
    
    function getPaid() {
        var(employee,index) = _findemployee(msg.sender);
        assert(employee.id!=0x0);
        
        uint nextPayday = employee.lastPayday + payDuration;
        assert(nextPayday < now);

        employees[index].lastPayday = nextPayday;
        employees[index].id.transfer(employee.salary);
    }
}
